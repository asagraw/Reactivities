[{"C:\\Users\\ashish\\source\\repos\\Reactivities\\client-app\\src\\index.tsx":"1","C:\\Users\\ashish\\source\\repos\\Reactivities\\client-app\\src\\reportWebVitals.ts":"2","C:\\Users\\ashish\\source\\repos\\Reactivities\\client-app\\src\\app\\layout\\App.tsx":"3","C:\\Users\\ashish\\source\\repos\\Reactivities\\client-app\\src\\features\\nav\\NavBar.tsx":"4","C:\\Users\\ashish\\source\\repos\\Reactivities\\client-app\\src\\features\\activities\\dashboard\\ActivityDashboard.tsx":"5","C:\\Users\\ashish\\source\\repos\\Reactivities\\client-app\\src\\features\\activities\\dashboard\\ActivityList.tsx":"6","C:\\Users\\ashish\\source\\repos\\Reactivities\\client-app\\src\\features\\activities\\dashboard\\details\\ActivityDetails.tsx":"7","C:\\Users\\ashish\\source\\repos\\Reactivities\\client-app\\src\\features\\activities\\forms\\ActivityForm.tsx":"8","C:\\Users\\ashish\\source\\repos\\Reactivities\\client-app\\src\\app\\api\\agent.ts":"9","C:\\Users\\ashish\\source\\repos\\Reactivities\\client-app\\src\\app\\layout\\LoadComponent.tsx":"10","C:\\Users\\ashish\\source\\repos\\Reactivities\\client-app\\src\\app\\stores\\activityStore.ts":"11","C:\\Users\\ashish\\source\\repos\\Reactivities\\client-app\\src\\features\\home\\HomePage.tsx":"12","C:\\Users\\ashish\\source\\repos\\Reactivities\\client-app\\src\\app\\layout\\ScrollToTop.tsx":"13","C:\\Users\\ashish\\source\\repos\\Reactivities\\client-app\\src\\features\\activities\\dashboard\\ActivityListItem.tsx":"14","C:\\Users\\ashish\\source\\repos\\Reactivities\\client-app\\src\\features\\activities\\dashboard\\details\\ActivityDetailedHeader.tsx":"15","C:\\Users\\ashish\\source\\repos\\Reactivities\\client-app\\src\\features\\activities\\dashboard\\details\\ActivityDetailedInfo.tsx":"16","C:\\Users\\ashish\\source\\repos\\Reactivities\\client-app\\src\\features\\activities\\dashboard\\details\\ActivityDetailedChat.tsx":"17","C:\\Users\\ashish\\source\\repos\\Reactivities\\client-app\\src\\features\\activities\\dashboard\\details\\ActivityDetailedSidebar.tsx":"18","C:\\Users\\ashish\\source\\repos\\Reactivities\\client-app\\src\\app\\layout\\NotFound.tsx":"19","C:\\Users\\ashish\\source\\repos\\Reactivities\\client-app\\src\\app\\common\\form\\MyTextInput.tsx":"20","C:\\Users\\ashish\\source\\repos\\Reactivities\\client-app\\src\\app\\common\\form\\MyTextArea.tsx":"21","C:\\Users\\ashish\\source\\repos\\Reactivities\\client-app\\src\\app\\common\\options\\categoryOptions.ts":"22","C:\\Users\\ashish\\source\\repos\\Reactivities\\client-app\\src\\app\\common\\form\\MySelectInput.tsx":"23","C:\\Users\\ashish\\source\\repos\\Reactivities\\client-app\\src\\app\\common\\form\\MyDateInput.tsx":"24","C:\\Users\\ashish\\source\\repos\\Reactivities\\client-app\\src\\features\\users\\LoginForm.tsx":"25","C:\\Users\\ashish\\source\\repos\\Reactivities\\client-app\\src\\app\\stores\\userStore.ts":"26","C:\\Users\\ashish\\source\\repos\\Reactivities\\client-app\\src\\app\\common\\modals\\ModalContainer.tsx":"27","C:\\Users\\ashish\\source\\repos\\Reactivities\\client-app\\src\\app\\stores\\modalStore.ts":"28","C:\\Users\\ashish\\source\\repos\\Reactivities\\client-app\\src\\app\\stores\\store.ts":"29","C:\\Users\\ashish\\source\\repos\\Reactivities\\client-app\\src\\features\\users\\Register.tsx":"30"},{"size":918,"mtime":1614496179505,"results":"31","hashOfConfig":"32"},{"size":425,"mtime":499162500000,"results":"33","hashOfConfig":"32"},{"size":2341,"mtime":1616586406068,"results":"34","hashOfConfig":"32"},{"size":2111,"mtime":1615810471134,"results":"35","hashOfConfig":"32"},{"size":1073,"mtime":1611642605245,"results":"36","hashOfConfig":"32"},{"size":1253,"mtime":1612064462337,"results":"37","hashOfConfig":"32"},{"size":1791,"mtime":1613903912413,"results":"38","hashOfConfig":"32"},{"size":4764,"mtime":1614498323018,"results":"39","hashOfConfig":"32"},{"size":2859,"mtime":1617431649195,"results":"40","hashOfConfig":"32"},{"size":329,"mtime":1610512541550,"results":"41","hashOfConfig":"32"},{"size":4602,"mtime":1614497585809,"results":"42","hashOfConfig":"32"},{"size":1842,"mtime":1617018446178,"results":"43","hashOfConfig":"32"},{"size":332,"mtime":1611644267349,"results":"44","hashOfConfig":"32"},{"size":1801,"mtime":1614497419108,"results":"45","hashOfConfig":"32"},{"size":2077,"mtime":1614497477065,"results":"46","hashOfConfig":"32"},{"size":1778,"mtime":1614497537078,"results":"47","hashOfConfig":"32"},{"size":2385,"mtime":1612072145854,"results":"48","hashOfConfig":"32"},{"size":2434,"mtime":1612072219233,"results":"49","hashOfConfig":"32"},{"size":653,"mtime":1613044735368,"results":"50","hashOfConfig":"32"},{"size":653,"mtime":1614492831522,"results":"51","hashOfConfig":"32"},{"size":656,"mtime":1614493289085,"results":"52","hashOfConfig":"32"},{"size":269,"mtime":1614493992064,"results":"53","hashOfConfig":"32"},{"size":910,"mtime":1614493745673,"results":"54","hashOfConfig":"32"},{"size":802,"mtime":1614496348848,"results":"55","hashOfConfig":"32"},{"size":1343,"mtime":1617018695403,"results":"56","hashOfConfig":"32"},{"size":2006,"mtime":1617017001408,"results":"57","hashOfConfig":"32"},{"size":509,"mtime":1616586724084,"results":"58","hashOfConfig":"32"},{"size":491,"mtime":1616503255395,"results":"59","hashOfConfig":"32"},{"size":920,"mtime":1616502195730,"results":"60","hashOfConfig":"32"},{"size":2107,"mtime":1617431720984,"results":"61","hashOfConfig":"32"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},"1nasf2t",{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"64"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"64"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"64"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"64"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"64"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"64"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"64"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"64"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"64"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\ashish\\source\\repos\\Reactivities\\client-app\\src\\index.tsx",[],["132","133"],"C:\\Users\\ashish\\source\\repos\\Reactivities\\client-app\\src\\reportWebVitals.ts",[],"C:\\Users\\ashish\\source\\repos\\Reactivities\\client-app\\src\\app\\layout\\App.tsx",["134"],"import React, { useEffect, Fragment, useContext } from 'react';\nimport { Container } from 'semantic-ui-react';\nimport NavBar from '../../features/nav/NavBar';\nimport ActivityDashboard from '../../features/activities/dashboard/ActivityDashboard';\nimport { LoadComponent } from './LoadComponent';\nimport ActivityStore from '../stores/activityStore'\nimport userStore from '../stores/userStore'\nimport { observer } from 'mobx-react-lite';\nimport { Route, RouteComponentProps, Switch, withRouter } from 'react-router-dom';\nimport HomePage from '../../features/home/HomePage';\nimport ActivityForm from '../../features/activities/forms/ActivityForm';\nimport ActivityDetails from '../../features/activities/dashboard/details/ActivityDetails';\nimport NotFound from './NotFound';\nimport { ToastContainer } from 'react-toastify';\nimport LoginForm from '../../features/users/LoginForm';\nimport ModalContainer from '../common/modals/ModalContainer';\n\n// interface IState {\n//   activities: IActivity[]\n// }\n\n\nconst App: React.FC<RouteComponentProps> = ({ location }) => {\n\n  const activityStore = useContext(ActivityStore);\n  const usersStore = useContext(userStore);\n\n  useEffect(() => {\n    activityStore.loadActivities();\n  }, [activityStore]);\n\n  useEffect(() => {\n    if (usersStore.token) {\n      usersStore.getUser().finally(() => usersStore.setAppLoaded());\n    } else {\n      usersStore.setAppLoaded();\n    }\n  }, [usersStore])\n\n  if (!usersStore.appLoaded) {\n    return <LoadComponent content='Loading app..' />\n  }\n\n  if (activityStore.loading) {\n    return <LoadComponent content=\"loading activities\" />\n  }\n\n  return (\n    <>\n      <ToastContainer position='bottom-right' />\n      <ModalContainer />\n      <Route exact path=\"/\" component={HomePage} />\n      <Route path=\"/(.+)\" render={() => (\n        <>\n          <NavBar />\n          <Container style={{ marginTop: '7em' }}>\n            <Switch>\n              <Route exact path=\"/activities\" component={ActivityDashboard} />\n              <Route exact path=\"/activities/:id\" component={ActivityDetails} />\n              <Route key={location.key} path={[\"/createActivity\", \"/manage/:id\"]} component={ActivityForm} />\n              <Route component={NotFound} />\n            </Switch>\n          </Container>\n        </>\n      )} />\n\n    </>\n  );\n}\n\nexport default withRouter(observer(App));\n","C:\\Users\\ashish\\source\\repos\\Reactivities\\client-app\\src\\features\\nav\\NavBar.tsx",[],"C:\\Users\\ashish\\source\\repos\\Reactivities\\client-app\\src\\features\\activities\\dashboard\\ActivityDashboard.tsx",[],"C:\\Users\\ashish\\source\\repos\\Reactivities\\client-app\\src\\features\\activities\\dashboard\\ActivityList.tsx",["135"],"import { observer } from 'mobx-react-lite'\r\nimport React, { Fragment, useContext } from 'react'\r\nimport { Item, Label, Segment } from 'semantic-ui-react'\r\nimport ActivityStore from '../../../app/stores/activityStore'\r\nimport ActivityListItem from './ActivityListItem'\r\n\r\n// interface IProps {\r\n//     setEditMode: (editMode: boolean) => void;\r\n//     deleteActivity: (event: SyntheticEvent<HTMLButtonElement>, id: string) => void;\r\n//     submitting: boolean;\r\n//     targetDel: string;\r\n// }\r\nconst ActivityList = () => {\r\n    const activityStore = useContext(ActivityStore);\r\n    const { activitiesByDate } = activityStore;\r\n    return (\r\n        <Fragment>\r\n            {activitiesByDate.map(([group, activities]) => (\r\n                <Fragment key={group}>\r\n                    <Label size='large' color='blue'>\r\n                        {group}\r\n                    </Label>\r\n                    <Item.Group divided>\r\n                        {activities.map(activity => (\r\n                            <ActivityListItem activity={activity} key={activity.id} />\r\n                        ))}\r\n                    </Item.Group>\r\n                </Fragment>\r\n            ))}\r\n        </Fragment>\r\n\r\n\r\n    )\r\n}\r\n\r\nexport default observer(ActivityList);\r\n","C:\\Users\\ashish\\source\\repos\\Reactivities\\client-app\\src\\features\\activities\\dashboard\\details\\ActivityDetails.tsx",[],"C:\\Users\\ashish\\source\\repos\\Reactivities\\client-app\\src\\features\\activities\\forms\\ActivityForm.tsx",["136"],"import React, { useContext, useEffect, useState } from 'react'\r\nimport { Button, Grid, GridColumn, Header, Segment } from 'semantic-ui-react'\r\nimport { IActivity } from '../../../app/models/activity'\r\nimport { v4 as uuid } from 'uuid'\r\nimport ActivityStore from '../../../app/stores/activityStore';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport { Formik, Form } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport MyTextInput from '../../../app/common/form/MyTextInput';\r\nimport MyTextArea from '../../../app/common/form/MyTextArea';\r\nimport MySelectInput from '../../../app/common/form/MySelectInput';\r\nimport { categoryOption } from '../../../app/common/options/categoryOptions';\r\nimport MyDateInput from '../../../app/common/form/MyDateInput';\r\n\r\ninterface DetailsParam {\r\n    id: string\r\n}\r\n\r\nconst ActivityForm: React.FC<RouteComponentProps<DetailsParam>> = ({ match, history }) => {\r\n\r\n    const activityStore = useContext(ActivityStore);\r\n    const { selectedActivity, setEditMode, createActivity, submitting, editActivity, loadActivity, setSelectedActivity } = activityStore;\r\n    const [activity, setActivity] = useState<IActivity>({\r\n        id: '', title: '', category: '', description: '', date: null, city: '', venue: ''\r\n    });\r\n\r\n    const validationSchema = Yup.object({\r\n        title: Yup.string().required('the activity title is required'),\r\n        description: Yup.string().required('the activity decription is required'),\r\n        category: Yup.string().required(),\r\n        date: Yup.string().required('the date is required').nullable(),\r\n        venue: Yup.string().required(),\r\n        city: Yup.string().required(),\r\n    })\r\n\r\n    useEffect(() => {\r\n        if (match.params.id && activity?.id.length === 0) {\r\n            loadActivity(match.params.id).then(() => selectedActivity && setActivity(selectedActivity));\r\n        }\r\n\r\n        return () => {\r\n            setSelectedActivity(undefined);\r\n        }\r\n    }, [loadActivity, setSelectedActivity, selectedActivity, match.params.id]);\r\n\r\n    const handleFormSubmit = (activity: IActivity) => {\r\n        if (activity.id.length === 0) {\r\n\r\n            (async () => {\r\n                let newActivity = {\r\n                    ...activity,\r\n                    id: uuid()\r\n                }\r\n                await createActivity(newActivity);\r\n                history.push(`/activities/${newActivity.id}`)\r\n            })();\r\n        } else {\r\n            (async () => {\r\n                await editActivity(activity);\r\n                history.push(`/activities/${activity.id}`);\r\n            })();\r\n        }\r\n    }\r\n    // const handleChange = (event: FormEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n    //     const { name, value } = event.currentTarget;\r\n    //     setActivity({ ...activity, [name]: value });\r\n    // }\r\n    return (\r\n        <Grid>\r\n            <GridColumn width={10}>\r\n                <Segment clearing>\r\n                    <Header content='Activity Details' sub color='teal' />\r\n                    <Formik enableReinitialize initialValues={activity} onSubmit={values => handleFormSubmit(values)} validationSchema={validationSchema}>\r\n                        {({ handleSubmit }) => (\r\n                            <Form onSubmit={handleSubmit} className='ui form'>\r\n                                <MyTextInput name='title' placeholder='Title' />\r\n\r\n                                <MyTextArea row={3} name='description' placeholder='Description' />\r\n                                <MySelectInput name='category' placeholder='Category' options={categoryOption} />\r\n                                <MyDateInput\r\n                                    name='date'\r\n                                    placeholderText='Date'\r\n                                    showTimeSelect\r\n                                    timeCaption='time'\r\n                                    dateFormat='MMMM d, yyyy h:mm aa' />\r\n                                <Header content='Location Details' sub color='teal' />\r\n                                <MyTextInput name='city' placeholder='City' />\r\n                                <MyTextInput name='venue' placeholder='Venue' />\r\n                                <Button\r\n                                    disabled={submitting}\r\n                                    content='Submit' positive floated='right' loading={submitting} />\r\n                                <Button content='Cancel' floated='right' onClick={() => setEditMode(false)} />\r\n                            </Form>\r\n                        )}\r\n                    </Formik>\r\n                </Segment>\r\n            </GridColumn>\r\n        </Grid>\r\n    )\r\n};\r\n\r\nexport default observer(ActivityForm);\r\n","C:\\Users\\ashish\\source\\repos\\Reactivities\\client-app\\src\\app\\api\\agent.ts",["137","138","139","140","141"],"C:\\Users\\ashish\\source\\repos\\Reactivities\\client-app\\src\\app\\layout\\LoadComponent.tsx",[],"C:\\Users\\ashish\\source\\repos\\Reactivities\\client-app\\src\\app\\stores\\activityStore.ts",[],"C:\\Users\\ashish\\source\\repos\\Reactivities\\client-app\\src\\features\\home\\HomePage.tsx",["142","143"],"import { observer } from 'mobx-react-lite';\r\nimport React, { useContext } from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport { Button, Container, Header, Segment, Image } from 'semantic-ui-react';\r\nimport modalStore from '../../app/stores/modalStore';\r\nimport { store, useStore } from '../../app/stores/store';\r\nimport userStore from '../../app/stores/userStore';\r\nimport LoginForm from '../users/LoginForm';\r\nimport Register from '../users/Register';\r\n\r\nconst HomePage = () => {\r\n    const usersStores = useContext(userStore);\r\n    const { modalStore } = useStore();\r\n    return (\r\n        <Segment inverted textAlign='center' vertical className='masthead' >\r\n            <Container text>\r\n                <Header as='h1' inverted>\r\n                    <Image size='tiny' src='/asset/logo.png' alt='logo' style={{ marginBottom: 12 }} />\r\n                        Reactivities\r\n                    </Header>\r\n                {usersStores.isLoggedIn ? (\r\n                    <>\r\n                        <Header as='h2' inverted content='Welcome to Reactivities' />\r\n                        <Button as={Link} to='/activities' size='huge' inverted>\r\n                            Go to Activities!\r\n                        </Button>\r\n                    </>\r\n                ) : (\r\n                        <>\r\n                            <Button onClick={() => modalStore.openModal(<LoginForm />)} size='huge' inverted>\r\n                                Login!\r\n                        </Button>\r\n                            <Button onClick={() => modalStore.openModal(<Register />)} size='huge' inverted>\r\n                                Register!\r\n                             </Button>\r\n                        </>\r\n                    )}\r\n            </Container>\r\n        </Segment>\r\n    )\r\n}\r\n\r\nexport default observer(HomePage);\r\n","C:\\Users\\ashish\\source\\repos\\Reactivities\\client-app\\src\\app\\layout\\ScrollToTop.tsx",[],"C:\\Users\\ashish\\source\\repos\\Reactivities\\client-app\\src\\features\\activities\\dashboard\\ActivityListItem.tsx",["144","145","146","147","148"],"import { format } from 'date-fns';\r\nimport React, { useContext } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Item, Button, Label, Segment, Icon } from 'semantic-ui-react'\r\nimport { IActivity } from '../../../app/models/activity';\r\nimport ActivityStore from '../../../app/stores/activityStore'\r\n\r\nconst ActivityListItem: React.FC<{ activity: IActivity }> = ({ activity }) => {\r\n    const activityStore = useContext(ActivityStore);\r\n    const { activitiesByDate, submitting, deleteActivity, target } = activityStore;\r\n    return (\r\n        <Segment.Group>\r\n            <Segment>\r\n                <Item.Group key={activity.id}>\r\n                    <Item>\r\n                        <Item.Image size='tiny' circular src='/asset/user.png' />\r\n                        <Item.Content>\r\n                            <Item.Header as='a'>{activity.title}</Item.Header>\r\n                            <Item.Description>\r\n                                Hsted by Ash\r\n                        </Item.Description>\r\n                        </Item.Content>\r\n                    </Item>\r\n                </Item.Group>\r\n            </Segment>\r\n            <Segment>\r\n                <Icon name='clock' /> {format(activity.date!, 'dd MMM yyyy h:mm aa')}\r\n                <Icon name='marker' /> {activity.venue}, {activity.city}\r\n            </Segment>\r\n            <Segment secondary>\r\n                Attendees will go here\r\n            </Segment>\r\n            <Segment clearing>\r\n                <span>\r\n                    {activity.description}\r\n                </span>\r\n                <Button floated='right' content='View' color='blue' as={Link} to={`/activities/${activity.id}`}\r\n                />\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n};\r\n\r\nexport default ActivityListItem;\r\n","C:\\Users\\ashish\\source\\repos\\Reactivities\\client-app\\src\\features\\activities\\dashboard\\details\\ActivityDetailedHeader.tsx",[],"C:\\Users\\ashish\\source\\repos\\Reactivities\\client-app\\src\\features\\activities\\dashboard\\details\\ActivityDetailedInfo.tsx",[],"C:\\Users\\ashish\\source\\repos\\Reactivities\\client-app\\src\\features\\activities\\dashboard\\details\\ActivityDetailedChat.tsx",[],"C:\\Users\\ashish\\source\\repos\\Reactivities\\client-app\\src\\features\\activities\\dashboard\\details\\ActivityDetailedSidebar.tsx",[],"C:\\Users\\ashish\\source\\repos\\Reactivities\\client-app\\src\\app\\layout\\NotFound.tsx",[],"C:\\Users\\ashish\\source\\repos\\Reactivities\\client-app\\src\\app\\common\\form\\MyTextInput.tsx",[],"C:\\Users\\ashish\\source\\repos\\Reactivities\\client-app\\src\\app\\common\\form\\MyTextArea.tsx",[],"C:\\Users\\ashish\\source\\repos\\Reactivities\\client-app\\src\\app\\common\\options\\categoryOptions.ts",[],"C:\\Users\\ashish\\source\\repos\\Reactivities\\client-app\\src\\app\\common\\form\\MySelectInput.tsx",[],"C:\\Users\\ashish\\source\\repos\\Reactivities\\client-app\\src\\app\\common\\form\\MyDateInput.tsx",[],"C:\\Users\\ashish\\source\\repos\\Reactivities\\client-app\\src\\features\\users\\LoginForm.tsx",["149"],"import { ErrorMessage, Formik } from 'formik';\r\nimport { observer } from 'mobx-react-lite';\r\nimport React, { useContext } from 'react';\r\nimport { Button, Form, Header, Label } from 'semantic-ui-react';\r\nimport MyTextInput from '../../app/common/form/MyTextInput';\r\nimport userStore from '../../app/stores/userStore';\r\n\r\n\r\nexport default observer(function LoginForm() {\r\n    const usersStore = useContext(userStore);\r\n    return (\r\n        <Formik\r\n            initialValues={{ email: \"\", password: \"\", error: null }}\r\n            onSubmit={(values, { setErrors }) => usersStore.login(values).catch(error => setErrors({ error: 'Invalid email or password' }))}\r\n        >\r\n            {({ handleSubmit, isSubmitting, errors }) => (\r\n                <Form className='ui form' onSubmit={handleSubmit} autoComplete='off'>\r\n                    <MyTextInput name='email' placeholder='Email' />\r\n                    <MyTextInput name='password' placeholder='Password' type='password' />\r\n                    <ErrorMessage\r\n                        name='error' render={() => <Label style={{ marginBottom: 10 }} basic color='red' content={errors.error} />}\r\n                    />\r\n                    <Button loading={isSubmitting} positive content='Login' type='submit' fluid />\r\n\r\n                </Form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","C:\\Users\\ashish\\source\\repos\\Reactivities\\client-app\\src\\app\\stores\\userStore.ts",["150"],"import { createContext, useContext } from \"react\";\r\nimport { makeAutoObservable, reaction, runInAction } from \"mobx\";\r\nimport agent from \"../api/agent\";\r\nimport { User, UserFormValues } from \"./../models/user\";\r\nimport { history } from \"../..\";\r\nimport { store } from \"./store\";\r\n\r\nclass UserStore {\r\n  user: User | null = null;\r\n  token: string | null = window.localStorage.getItem(\"jwt\");\r\n  appLoaded = false;\r\n\r\n  constructor() {\r\n    makeAutoObservable(this);\r\n    reaction(\r\n      () => this.token,\r\n      (token) => {\r\n        if (token) {\r\n          window.localStorage.setItem(\"jwt\", token);\r\n        } else {\r\n          window.localStorage.removeItem(\"jwt\");\r\n        }\r\n      }\r\n    );\r\n  }\r\n\r\n  get isLoggedIn() {\r\n    return !!this.user;\r\n  }\r\n\r\n  setToken = (token: string | null) => {\r\n    // if (token) window.localStorage.setItem(\"jwt\", token);\r\n    this.token = token;\r\n  };\r\n\r\n  setAppLoaded = () => {\r\n    this.appLoaded = true;\r\n  };\r\n\r\n  login = async (creds: UserFormValues) => {\r\n    try {\r\n      const user = await agent.Account.login(creds);\r\n      this.setToken(user.token);\r\n      runInAction(() => (this.user = user));\r\n      history.push(\"/activities\");\r\n      store.modalStore.closeModal();\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  logout = () => {\r\n    this.setToken(null);\r\n    window.localStorage.removeItem(\"jwt\");\r\n    this.user = null;\r\n    history.push(\"/\");\r\n  };\r\n\r\n  getUser = async () => {\r\n    try {\r\n      const user = await agent.Account.current();\r\n      runInAction(() => (this.user = user));\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  register = async (creds: UserFormValues) => {\r\n    try {\r\n      const user = await agent.Account.register(creds);\r\n      this.setToken(user.token);\r\n      runInAction(() => (this.user = user));\r\n      history.push(\"/activities\");\r\n      store.modalStore.closeModal();\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  };\r\n}\r\n\r\nexport default createContext(new UserStore());\r\n","C:\\Users\\ashish\\source\\repos\\Reactivities\\client-app\\src\\app\\common\\modals\\ModalContainer.tsx",["151"],"import { observer } from 'mobx-react-lite';\r\nimport React, { useContext } from 'react';\r\nimport { Modal } from 'semantic-ui-react';\r\nimport { useStore } from '../../stores/store';\r\n\r\nexport default observer(function ModalContainer() {\r\n    const { modalStore } = useStore();\r\n    return (\r\n        <Modal open={modalStore.modal.open} onClose={modalStore.closeModal} size='mini'>\r\n            <Modal.Content>\r\n                {modalStore.modal.body}\r\n            </Modal.Content>\r\n        </Modal>\r\n    )\r\n\r\n})","C:\\Users\\ashish\\source\\repos\\Reactivities\\client-app\\src\\app\\stores\\modalStore.ts",[],"C:\\Users\\ashish\\source\\repos\\Reactivities\\client-app\\src\\app\\stores\\store.ts",["152"],"import { createContext, useContext } from \"react\";\r\n// import ActivityStore from \"./activityStore\";\r\n// import CommentStore from \"./commentStore\";\r\n// import CommonStore from \"./commonStore\";\r\nimport ModalStore from \"./modalStore\";\r\n// import ProfileStore from \"./profileStore\";\r\nimport UserStore from \"./userStore\";\r\n\r\ninterface Store {\r\n  // activityStore: ActivityStore;\r\n  // commonStore: CommonStore;\r\n  // userStore: UserStore;\r\n  modalStore: ModalStore;\r\n  // profileStore: ProfileStore;\r\n  // commentStore: CommentStore;\r\n}\r\n\r\nexport const store: Store = {\r\n  // activityStore: new ActivityStore(),\r\n  // commonStore: new CommonStore(),\r\n  // userStore: new UserStore(),\r\n  modalStore: new ModalStore(),\r\n  // profileStore: new ProfileStore(),\r\n  // commentStore: new CommentStore()\r\n};\r\n\r\nexport const StoreContext = createContext(store);\r\n\r\nexport function useStore() {\r\n  return useContext(StoreContext);\r\n}\r\n","C:\\Users\\ashish\\source\\repos\\Reactivities\\client-app\\src\\features\\users\\Register.tsx",[],{"ruleId":"153","replacedBy":"154"},{"ruleId":"155","replacedBy":"156"},{"ruleId":"157","severity":1,"message":"158","line":15,"column":8,"nodeType":"159","messageId":"160","endLine":15,"endColumn":17},{"ruleId":"157","severity":1,"message":"161","line":3,"column":23,"nodeType":"159","messageId":"160","endLine":3,"endColumn":30},{"ruleId":"162","severity":1,"message":"163","line":45,"column":8,"nodeType":"164","endLine":45,"endColumn":78,"suggestions":"165"},{"ruleId":"157","severity":1,"message":"166","line":7,"column":10,"nodeType":"159","messageId":"160","endLine":7,"endColumn":17},{"ruleId":"157","severity":1,"message":"167","line":8,"column":8,"nodeType":"159","messageId":"160","endLine":8,"endColumn":17},{"ruleId":"157","severity":1,"message":"168","line":9,"column":10,"nodeType":"159","messageId":"160","endLine":9,"endColumn":20},{"ruleId":"169","severity":1,"message":"170","line":34,"column":21,"nodeType":"171","messageId":"172","endLine":34,"endColumn":23},{"ruleId":"173","severity":1,"message":"174","line":85,"column":1,"nodeType":"175","endLine":88,"endColumn":3},{"ruleId":"157","severity":1,"message":"176","line":5,"column":8,"nodeType":"159","messageId":"160","endLine":5,"endColumn":18},{"ruleId":"157","severity":1,"message":"177","line":6,"column":10,"nodeType":"159","messageId":"160","endLine":6,"endColumn":15},{"ruleId":"157","severity":1,"message":"178","line":4,"column":24,"nodeType":"159","messageId":"160","endLine":4,"endColumn":29},{"ruleId":"157","severity":1,"message":"179","line":10,"column":13,"nodeType":"159","messageId":"160","endLine":10,"endColumn":29},{"ruleId":"157","severity":1,"message":"180","line":10,"column":31,"nodeType":"159","messageId":"160","endLine":10,"endColumn":41},{"ruleId":"157","severity":1,"message":"181","line":10,"column":43,"nodeType":"159","messageId":"160","endLine":10,"endColumn":57},{"ruleId":"157","severity":1,"message":"182","line":10,"column":59,"nodeType":"159","messageId":"160","endLine":10,"endColumn":65},{"ruleId":"157","severity":1,"message":"183","line":4,"column":24,"nodeType":"159","messageId":"160","endLine":4,"endColumn":30},{"ruleId":"157","severity":1,"message":"168","line":1,"column":25,"nodeType":"159","messageId":"160","endLine":1,"endColumn":35},{"ruleId":"157","severity":1,"message":"168","line":2,"column":17,"nodeType":"159","messageId":"160","endLine":2,"endColumn":27},{"ruleId":"157","severity":1,"message":"184","line":7,"column":8,"nodeType":"159","messageId":"160","endLine":7,"endColumn":17},"no-native-reassign",["185"],"no-negated-in-lhs",["186"],"@typescript-eslint/no-unused-vars","'LoginForm' is defined but never used.","Identifier","unusedVar","'Segment' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'activity?.id.length'. Either include it or remove the dependency array.","ArrayExpression",["187"],"'request' is defined but never used.","'userStore' is defined but never used.","'useContext' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'modalStore' is defined but never used.","'store' is defined but never used.","'Label' is defined but never used.","'activitiesByDate' is assigned a value but never used.","'submitting' is assigned a value but never used.","'deleteActivity' is assigned a value but never used.","'target' is assigned a value but never used.","'Header' is defined but never used.","'UserStore' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"188","fix":"189"},"Update the dependencies array to be: [loadActivity, setSelectedActivity, selectedActivity, match.params.id, activity?.id.length]",{"range":"190","text":"191"},[2008,2078],"[loadActivity, setSelectedActivity, selectedActivity, match.params.id, activity?.id.length]"]