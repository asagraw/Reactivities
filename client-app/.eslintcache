[{"C:\\Users\\ashish\\source\\repos\\Reactivities\\client-app\\src\\index.tsx":"1","C:\\Users\\ashish\\source\\repos\\Reactivities\\client-app\\src\\reportWebVitals.ts":"2","C:\\Users\\ashish\\source\\repos\\Reactivities\\client-app\\src\\app\\layout\\App.tsx":"3","C:\\Users\\ashish\\source\\repos\\Reactivities\\client-app\\src\\features\\nav\\NavBar.tsx":"4","C:\\Users\\ashish\\source\\repos\\Reactivities\\client-app\\src\\features\\activities\\dashboard\\ActivityDashboard.tsx":"5","C:\\Users\\ashish\\source\\repos\\Reactivities\\client-app\\src\\features\\activities\\dashboard\\ActivityList.tsx":"6","C:\\Users\\ashish\\source\\repos\\Reactivities\\client-app\\src\\features\\activities\\dashboard\\details\\ActivityDetails.tsx":"7","C:\\Users\\ashish\\source\\repos\\Reactivities\\client-app\\src\\features\\activities\\forms\\ActivityForm.tsx":"8","C:\\Users\\ashish\\source\\repos\\Reactivities\\client-app\\src\\app\\api\\agent.ts":"9","C:\\Users\\ashish\\source\\repos\\Reactivities\\client-app\\src\\app\\layout\\LoadComponent.tsx":"10","C:\\Users\\ashish\\source\\repos\\Reactivities\\client-app\\src\\app\\stores\\activityStore.ts":"11","C:\\Users\\ashish\\source\\repos\\Reactivities\\client-app\\src\\features\\home\\HomePage.tsx":"12","C:\\Users\\ashish\\source\\repos\\Reactivities\\client-app\\src\\app\\layout\\ScrollToTop.tsx":"13","C:\\Users\\ashish\\source\\repos\\Reactivities\\client-app\\src\\features\\activities\\dashboard\\ActivityListItem.tsx":"14","C:\\Users\\ashish\\source\\repos\\Reactivities\\client-app\\src\\features\\activities\\dashboard\\details\\ActivityDetailedHeader.tsx":"15","C:\\Users\\ashish\\source\\repos\\Reactivities\\client-app\\src\\features\\activities\\dashboard\\details\\ActivityDetailedInfo.tsx":"16","C:\\Users\\ashish\\source\\repos\\Reactivities\\client-app\\src\\features\\activities\\dashboard\\details\\ActivityDetailedChat.tsx":"17","C:\\Users\\ashish\\source\\repos\\Reactivities\\client-app\\src\\features\\activities\\dashboard\\details\\ActivityDetailedSidebar.tsx":"18","C:\\Users\\ashish\\source\\repos\\Reactivities\\client-app\\src\\app\\layout\\NotFound.tsx":"19","C:\\Users\\ashish\\source\\repos\\Reactivities\\client-app\\src\\app\\common\\form\\MyTextInput.tsx":"20","C:\\Users\\ashish\\source\\repos\\Reactivities\\client-app\\src\\app\\common\\form\\MyTextArea.tsx":"21","C:\\Users\\ashish\\source\\repos\\Reactivities\\client-app\\src\\app\\common\\options\\categoryOptions.ts":"22","C:\\Users\\ashish\\source\\repos\\Reactivities\\client-app\\src\\app\\common\\form\\MySelectInput.tsx":"23","C:\\Users\\ashish\\source\\repos\\Reactivities\\client-app\\src\\app\\common\\form\\MyDateInput.tsx":"24"},{"size":918,"mtime":1614496179505,"results":"25","hashOfConfig":"26"},{"size":425,"mtime":499162500000,"results":"27","hashOfConfig":"26"},{"size":1867,"mtime":1613904929319,"results":"28","hashOfConfig":"26"},{"size":1330,"mtime":1611642799549,"results":"29","hashOfConfig":"26"},{"size":1073,"mtime":1611642605245,"results":"30","hashOfConfig":"26"},{"size":1253,"mtime":1612064462337,"results":"31","hashOfConfig":"26"},{"size":1791,"mtime":1613903912413,"results":"32","hashOfConfig":"26"},{"size":4764,"mtime":1614498323018,"results":"33","hashOfConfig":"26"},{"size":1854,"mtime":1613906103444,"results":"34","hashOfConfig":"26"},{"size":329,"mtime":1610512541550,"results":"35","hashOfConfig":"26"},{"size":4602,"mtime":1614497585809,"results":"36","hashOfConfig":"26"},{"size":832,"mtime":1612073177636,"results":"37","hashOfConfig":"26"},{"size":332,"mtime":1611644267349,"results":"38","hashOfConfig":"26"},{"size":1801,"mtime":1614497419108,"results":"39","hashOfConfig":"26"},{"size":2077,"mtime":1614497477065,"results":"40","hashOfConfig":"26"},{"size":1778,"mtime":1614497537078,"results":"41","hashOfConfig":"26"},{"size":2385,"mtime":1612072145854,"results":"42","hashOfConfig":"26"},{"size":2434,"mtime":1612072219233,"results":"43","hashOfConfig":"26"},{"size":653,"mtime":1613044735368,"results":"44","hashOfConfig":"26"},{"size":653,"mtime":1614492831522,"results":"45","hashOfConfig":"26"},{"size":656,"mtime":1614493289085,"results":"46","hashOfConfig":"26"},{"size":269,"mtime":1614493992064,"results":"47","hashOfConfig":"26"},{"size":910,"mtime":1614493745673,"results":"48","hashOfConfig":"26"},{"size":802,"mtime":1614496348848,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"1nasf2t",{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"52"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"52"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"52"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"C:\\Users\\ashish\\source\\repos\\Reactivities\\client-app\\src\\index.tsx",[],["103","104"],"C:\\Users\\ashish\\source\\repos\\Reactivities\\client-app\\src\\reportWebVitals.ts",[],"C:\\Users\\ashish\\source\\repos\\Reactivities\\client-app\\src\\app\\layout\\App.tsx",[],"C:\\Users\\ashish\\source\\repos\\Reactivities\\client-app\\src\\features\\nav\\NavBar.tsx",[],"C:\\Users\\ashish\\source\\repos\\Reactivities\\client-app\\src\\features\\activities\\dashboard\\ActivityDashboard.tsx",[],"C:\\Users\\ashish\\source\\repos\\Reactivities\\client-app\\src\\features\\activities\\dashboard\\ActivityList.tsx",["105"],"import { observer } from 'mobx-react-lite'\r\nimport React, { Fragment, useContext } from 'react'\r\nimport { Item, Label, Segment } from 'semantic-ui-react'\r\nimport ActivityStore from '../../../app/stores/activityStore'\r\nimport ActivityListItem from './ActivityListItem'\r\n\r\n// interface IProps {\r\n//     setEditMode: (editMode: boolean) => void;\r\n//     deleteActivity: (event: SyntheticEvent<HTMLButtonElement>, id: string) => void;\r\n//     submitting: boolean;\r\n//     targetDel: string;\r\n// }\r\nconst ActivityList = () => {\r\n    const activityStore = useContext(ActivityStore);\r\n    const { activitiesByDate } = activityStore;\r\n    return (\r\n        <Fragment>\r\n            {activitiesByDate.map(([group, activities]) => (\r\n                <Fragment key={group}>\r\n                    <Label size='large' color='blue'>\r\n                        {group}\r\n                    </Label>\r\n                    <Item.Group divided>\r\n                        {activities.map(activity => (\r\n                            <ActivityListItem activity={activity} key={activity.id} />\r\n                        ))}\r\n                    </Item.Group>\r\n                </Fragment>\r\n            ))}\r\n        </Fragment>\r\n\r\n\r\n    )\r\n}\r\n\r\nexport default observer(ActivityList);\r\n","C:\\Users\\ashish\\source\\repos\\Reactivities\\client-app\\src\\features\\activities\\dashboard\\details\\ActivityDetails.tsx",[],"C:\\Users\\ashish\\source\\repos\\Reactivities\\client-app\\src\\features\\activities\\forms\\ActivityForm.tsx",["106"],"import React, { useContext, useEffect, useState } from 'react'\r\nimport { Button, Grid, GridColumn, Header, Segment } from 'semantic-ui-react'\r\nimport { IActivity } from '../../../app/models/activity'\r\nimport { v4 as uuid } from 'uuid'\r\nimport ActivityStore from '../../../app/stores/activityStore';\r\nimport { observer } from 'mobx-react-lite';\r\nimport { RouteComponentProps } from 'react-router-dom';\r\nimport { Formik, Form } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport MyTextInput from '../../../app/common/form/MyTextInput';\r\nimport MyTextArea from '../../../app/common/form/MyTextArea';\r\nimport MySelectInput from '../../../app/common/form/MySelectInput';\r\nimport { categoryOption } from '../../../app/common/options/categoryOptions';\r\nimport MyDateInput from '../../../app/common/form/MyDateInput';\r\n\r\ninterface DetailsParam {\r\n    id: string\r\n}\r\n\r\nconst ActivityForm: React.FC<RouteComponentProps<DetailsParam>> = ({ match, history }) => {\r\n\r\n    const activityStore = useContext(ActivityStore);\r\n    const { selectedActivity, setEditMode, createActivity, submitting, editActivity, loadActivity, setSelectedActivity } = activityStore;\r\n    const [activity, setActivity] = useState<IActivity>({\r\n        id: '', title: '', category: '', description: '', date: null, city: '', venue: ''\r\n    });\r\n\r\n    const validationSchema = Yup.object({\r\n        title: Yup.string().required('the activity title is required'),\r\n        description: Yup.string().required('the activity decription is required'),\r\n        category: Yup.string().required(),\r\n        date: Yup.string().required('the date is required').nullable(),\r\n        venue: Yup.string().required(),\r\n        city: Yup.string().required(),\r\n    })\r\n\r\n    useEffect(() => {\r\n        if (match.params.id && activity?.id.length === 0) {\r\n            loadActivity(match.params.id).then(() => selectedActivity && setActivity(selectedActivity));\r\n        }\r\n\r\n        return () => {\r\n            setSelectedActivity(undefined);\r\n        }\r\n    }, [loadActivity, setSelectedActivity, selectedActivity, match.params.id]);\r\n\r\n    const handleFormSubmit = (activity: IActivity) => {\r\n        if (activity.id.length === 0) {\r\n\r\n            (async () => {\r\n                let newActivity = {\r\n                    ...activity,\r\n                    id: uuid()\r\n                }\r\n                await createActivity(newActivity);\r\n                history.push(`/activities/${newActivity.id}`)\r\n            })();\r\n        } else {\r\n            (async () => {\r\n                await editActivity(activity);\r\n                history.push(`/activities/${activity.id}`);\r\n            })();\r\n        }\r\n    }\r\n    // const handleChange = (event: FormEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n    //     const { name, value } = event.currentTarget;\r\n    //     setActivity({ ...activity, [name]: value });\r\n    // }\r\n    return (\r\n        <Grid>\r\n            <GridColumn width={10}>\r\n                <Segment clearing>\r\n                    <Header content='Activity Details' sub color='teal' />\r\n                    <Formik enableReinitialize initialValues={activity} onSubmit={values => handleFormSubmit(values)} validationSchema={validationSchema}>\r\n                        {({ handleSubmit }) => (\r\n                            <Form onSubmit={handleSubmit} className='ui form'>\r\n                                <MyTextInput name='title' placeholder='Title' />\r\n\r\n                                <MyTextArea row={3} name='description' placeholder='Description' />\r\n                                <MySelectInput name='category' placeholder='Category' options={categoryOption} />\r\n                                <MyDateInput\r\n                                    name='date'\r\n                                    placeholderText='Date'\r\n                                    showTimeSelect\r\n                                    timeCaption='time'\r\n                                    dateFormat='MMMM d, yyyy h:mm aa' />\r\n                                <Header content='Location Details' sub color='teal' />\r\n                                <MyTextInput name='city' placeholder='City' />\r\n                                <MyTextInput name='venue' placeholder='Venue' />\r\n                                <Button\r\n                                    disabled={submitting}\r\n                                    content='Submit' positive floated='right' loading={submitting} />\r\n                                <Button content='Cancel' floated='right' onClick={() => setEditMode(false)} />\r\n                            </Form>\r\n                        )}\r\n                    </Formik>\r\n                </Segment>\r\n            </GridColumn>\r\n        </Grid>\r\n    )\r\n};\r\n\r\nexport default observer(ActivityForm);\r\n","C:\\Users\\ashish\\source\\repos\\Reactivities\\client-app\\src\\app\\api\\agent.ts",["107"],"import { toast } from \"react-toastify\";\r\nimport { IActivity } from \"./../models/activity\";\r\nimport axios, { AxiosResponse } from \"axios\";\r\nimport { history } from \"../..\";\r\n\r\naxios.defaults.baseURL = \"http://localhost:5000/api\";\r\naxios.interceptors.response.use(undefined, (error) => {\r\n  if (!error.response) {\r\n    toast.error(\"Network error- Make sure API is running!\");\r\n  }\r\n  const { status, data, config } = error.response;\r\n\r\n  if (status === 404) {\r\n    history.push(\"/notfound\");\r\n  } else if (\r\n    status === 400 &&\r\n    data.errors.hasOwnProperty(\"id\") &&\r\n    config.method === \"get\"\r\n  ) {\r\n    history.push(\"/notfound\");\r\n  } else if (status === 500) {\r\n    toast.error(\"Server Error: Check the terminal for more info!\");\r\n  }\r\n});\r\n\r\nconst responseBody = (response: AxiosResponse) => response.data;\r\n\r\nconst sleep = (ms: number) => (response: AxiosResponse) =>\r\n  new Promise<AxiosResponse>((resolve) =>\r\n    setTimeout(() => resolve(response), ms)\r\n  );\r\n\r\nconst requests = {\r\n  get: (url: string) => axios.get(url).then(sleep(1000)).then(responseBody),\r\n  post: (url: string, body: {}) =>\r\n    axios.post(url, body).then(sleep(1000)).then(responseBody),\r\n  put: (url: string, body: {}) =>\r\n    axios.put(url, body).then(sleep(1000)).then(responseBody),\r\n  del: (url: string, body: {}) =>\r\n    axios.delete(url, body).then(sleep(1000)).then(responseBody),\r\n};\r\n\r\nconst Activities = {\r\n  list: (): Promise<IActivity[]> => requests.get(\"/activities\"),\r\n  details: (id: string) => requests.get(`/activities/${id}`),\r\n  create: (activity: IActivity) => requests.post(\"/activities\", activity),\r\n  update: (activity: IActivity) =>\r\n    requests.put(`/activities/${activity.id}`, activity),\r\n  delete: (id: string, activity: IActivity) =>\r\n    requests.del(`/activities/${id}`, { data: activity }),\r\n};\r\n\r\nexport default {\r\n  Activities,\r\n};\r\n","C:\\Users\\ashish\\source\\repos\\Reactivities\\client-app\\src\\app\\layout\\LoadComponent.tsx",[],"C:\\Users\\ashish\\source\\repos\\Reactivities\\client-app\\src\\app\\stores\\activityStore.ts",[],"C:\\Users\\ashish\\source\\repos\\Reactivities\\client-app\\src\\features\\home\\HomePage.tsx",[],"C:\\Users\\ashish\\source\\repos\\Reactivities\\client-app\\src\\app\\layout\\ScrollToTop.tsx",[],"C:\\Users\\ashish\\source\\repos\\Reactivities\\client-app\\src\\features\\activities\\dashboard\\ActivityListItem.tsx",["108","109","110","111","112"],"import { format } from 'date-fns';\r\nimport React, { useContext } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport { Item, Button, Label, Segment, Icon } from 'semantic-ui-react'\r\nimport { IActivity } from '../../../app/models/activity';\r\nimport ActivityStore from '../../../app/stores/activityStore'\r\n\r\nconst ActivityListItem: React.FC<{ activity: IActivity }> = ({ activity }) => {\r\n    const activityStore = useContext(ActivityStore);\r\n    const { activitiesByDate, submitting, deleteActivity, target } = activityStore;\r\n    return (\r\n        <Segment.Group>\r\n            <Segment>\r\n                <Item.Group key={activity.id}>\r\n                    <Item>\r\n                        <Item.Image size='tiny' circular src='/asset/user.png' />\r\n                        <Item.Content>\r\n                            <Item.Header as='a'>{activity.title}</Item.Header>\r\n                            <Item.Description>\r\n                                Hsted by Ash\r\n                        </Item.Description>\r\n                        </Item.Content>\r\n                    </Item>\r\n                </Item.Group>\r\n            </Segment>\r\n            <Segment>\r\n                <Icon name='clock' /> {format(activity.date!, 'dd MMM yyyy h:mm aa')}\r\n                <Icon name='marker' /> {activity.venue}, {activity.city}\r\n            </Segment>\r\n            <Segment secondary>\r\n                Attendees will go here\r\n            </Segment>\r\n            <Segment clearing>\r\n                <span>\r\n                    {activity.description}\r\n                </span>\r\n                <Button floated='right' content='View' color='blue' as={Link} to={`/activities/${activity.id}`}\r\n                />\r\n            </Segment>\r\n        </Segment.Group>\r\n    )\r\n};\r\n\r\nexport default ActivityListItem;\r\n","C:\\Users\\ashish\\source\\repos\\Reactivities\\client-app\\src\\features\\activities\\dashboard\\details\\ActivityDetailedHeader.tsx",[],"C:\\Users\\ashish\\source\\repos\\Reactivities\\client-app\\src\\features\\activities\\dashboard\\details\\ActivityDetailedInfo.tsx",[],"C:\\Users\\ashish\\source\\repos\\Reactivities\\client-app\\src\\features\\activities\\dashboard\\details\\ActivityDetailedChat.tsx",[],"C:\\Users\\ashish\\source\\repos\\Reactivities\\client-app\\src\\features\\activities\\dashboard\\details\\ActivityDetailedSidebar.tsx",[],"C:\\Users\\ashish\\source\\repos\\Reactivities\\client-app\\src\\app\\layout\\NotFound.tsx",[],"C:\\Users\\ashish\\source\\repos\\Reactivities\\client-app\\src\\app\\common\\form\\MyTextInput.tsx",[],"C:\\Users\\ashish\\source\\repos\\Reactivities\\client-app\\src\\app\\common\\form\\MyTextArea.tsx",[],"C:\\Users\\ashish\\source\\repos\\Reactivities\\client-app\\src\\app\\common\\options\\categoryOptions.ts",[],"C:\\Users\\ashish\\source\\repos\\Reactivities\\client-app\\src\\app\\common\\form\\MySelectInput.tsx",[],"C:\\Users\\ashish\\source\\repos\\Reactivities\\client-app\\src\\app\\common\\form\\MyDateInput.tsx",[],{"ruleId":"113","replacedBy":"114"},{"ruleId":"115","replacedBy":"116"},{"ruleId":"117","severity":1,"message":"118","line":3,"column":23,"nodeType":"119","messageId":"120","endLine":3,"endColumn":30},{"ruleId":"121","severity":1,"message":"122","line":45,"column":8,"nodeType":"123","endLine":45,"endColumn":78,"suggestions":"124"},{"ruleId":"125","severity":1,"message":"126","line":53,"column":1,"nodeType":"127","endLine":55,"endColumn":3},{"ruleId":"117","severity":1,"message":"128","line":4,"column":24,"nodeType":"119","messageId":"120","endLine":4,"endColumn":29},{"ruleId":"117","severity":1,"message":"129","line":10,"column":13,"nodeType":"119","messageId":"120","endLine":10,"endColumn":29},{"ruleId":"117","severity":1,"message":"130","line":10,"column":31,"nodeType":"119","messageId":"120","endLine":10,"endColumn":41},{"ruleId":"117","severity":1,"message":"131","line":10,"column":43,"nodeType":"119","messageId":"120","endLine":10,"endColumn":57},{"ruleId":"117","severity":1,"message":"132","line":10,"column":59,"nodeType":"119","messageId":"120","endLine":10,"endColumn":65},"no-native-reassign",["133"],"no-negated-in-lhs",["134"],"@typescript-eslint/no-unused-vars","'Segment' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'activity?.id.length'. Either include it or remove the dependency array.","ArrayExpression",["135"],"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'Label' is defined but never used.","'activitiesByDate' is assigned a value but never used.","'submitting' is assigned a value but never used.","'deleteActivity' is assigned a value but never used.","'target' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"136","fix":"137"},"Update the dependencies array to be: [loadActivity, setSelectedActivity, selectedActivity, match.params.id, activity?.id.length]",{"range":"138","text":"139"},[2008,2078],"[loadActivity, setSelectedActivity, selectedActivity, match.params.id, activity?.id.length]"]